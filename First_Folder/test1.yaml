# Stages
# Stage-1:
  # Task-1: Copy terraform-manifests files to Build Artifact Directory
  # Task-2: Publish build articats to Azure Pipelines
# Pipeline Hierarchial Flow: Stages -> Stage -> Jobs -> Job -> Steps -> Task1, Task2, Task3  

stages:
# Build Stage 
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: ubuntu-latest
    steps: 
## Publish Artifacts pipeline code in addition to Build and Push          
    - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory)        
    - bash: echo Before copying Contents in Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)        
    # Task-2: Copy files (Copy files from a source folder to target folder)
    # Source Directory: $(System.DefaultWorkingDirectory)/terraform-manifests
    # Target Directory: $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true
    # List files from Build Artifact Staging Directory - After Copy
    - bash: echo After copying to Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)  
    # Task-3: Publish build artifacts (Publish build to Azure Pipelines)           
    - task: PublishBuildArtifacts@1
      inputs:
        command: publish
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'terraform-manifests'
       # publishLocation: 'Container'
        publishLocation: 'pipeline'  


#Deploy the Artifact


# Deploy on DEV




- stage: validate
  dependsOn: "Build"
  #condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
  jobs:
  - job: validate
    continueOnError: false
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
      displayName: "Install"
      inputs:
           backendServiceArm: 'ARM'
           backendAzureRmResourceGroupName: ADO
           backendAzureRmStorageAccountName: adostg
           backendAzureRmContainerName: adocontain
           backendAzureRmKey: 'first'
           terraformVersion: 0.13.4
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'init'
      inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/_azure-terraform.git (1)/terraform-manifests'
          backendServiceArm: 'ARM'
          backendAzureRmResourceGroupName: ADO
          backendAzureRmStorageAccountName: adostg
          backendAzureRmContainerName: adocontain
          backendAzureRmKey: 'first'
- stage: plan
  dependsOn: [validate]
  condition: succeeded('validate')
  jobs:
  - job: terraform_plan_develop
    steps:
    - checkout: self
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
      displayName: "Install Terraform 0.13.4"
      inputs:
           backendServiceArm: 'ARM'
           backendAzureRmResourceGroupName: ADO
           backendAzureRmStorageAccountName: adostg
           backendAzureRmContainerName: adocontain
           backendAzureRmKey: 'first'
           terraformVersion: 0.13.4
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'init'
      inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/_azure-terraform.git (1)/terraform-manifests'
            backendServiceArm: 'ARM'
            backendAzureRmResourceGroupName: ADO
            backendAzureRmStorageAccountName: adostg
            backendAzureRmContainerName: adocontain
            backendAzureRmKey: 'first'
    - task: TerraformTaskV1@0
      inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'ARM'
- stage: apply
  dependsOn: [plan]
  condition: succeeded('plan')
  jobs:
   #- deployment: terraform_apply
   #  continueOnError: false
    # environment: 'PROD'
    # timeoutInMinutes: 120
   - job: terraform_apply_develop
     steps:
     - checkout: self
     - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
       displayName: "Install Terraform 0.13.4"
       inputs:
           backendServiceArm: 'ARM'
           backendAzureRmResourceGroupName: ADO
           backendAzureRmStorageAccountName: adostg
           backendAzureRmContainerName: adocontain
           backendAzureRmKey: 'first'
           terraformVersion: 0.13.4
     - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
       displayName: 'init'
       inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/_azure-terraform.git (1)/terraform-manifests'
            backendServiceArm: 'ARM'
            backendAzureRmResourceGroupName: ADO
            backendAzureRmStorageAccountName: adostg
            backendAzureRmContainerName: adocontain
            backendAzureRmKey: 'first'
     - task: TerraformTaskV1@0
       inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'ARM'
     - task: TerraformTaskV1@0
       inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'ARM'